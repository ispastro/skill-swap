generator client {
  provider = "prisma-client-js"
}

model SkillVerification {
  id        String   @id @default(uuid())
  userId    String
  skill     String
  status    VerificationStatus @default(PENDING)
  rating    Int      @default(0)
  verifiedCount Int  @default(0)
  raterId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, skill])
}
enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(uuid())
  username              String           @unique @db.VarChar(20)
  email                 String           @unique
  password              String
  bio                   String?          @db.VarChar(255)
  skillsHave            String[]         @default([])
  skillsWant            String[]         @default([])
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  SentProposals         BarterProposal[] @relation("SentProposals")
  ReceivedProposals     BarterProposal[] @relation("ReceivedProposals")
  SentChats             ChatSession[]    @relation("SentChats")
  ReceivedChats         ChatSession[]    @relation("ReceivedChats")
  ReceivedMessages      Message[]        @relation("ReceivedMessages")
  SentMessages          Message[]        @relation("SentMessages")
  ReceivedNotifications Notification[]   @relation("ReceivedNotifications")
  SentNotifications     Notification[]   @relation("SentNotifications")
  ReviewsGiven     Review[] @relation("ReviewsGiven")
  ReviewsReceived  Review[] @relation("ReviewsReceived")
  userAExchanges   SkillExchange[] @relation("UserAExchanges")
  userBExchanges   SkillExchange[] @relation("UserBExchanges")

  files              File[]
  skillVerifications SkillVerification[]
}

model BarterProposal {
  id         String         @id @default(uuid())
  fromUserId String
  toUserId   String
  offer      String         @db.VarChar(255)
  request    String         @db.VarChar(255)
  status     ProposalStatus @default(pending)
  createdAt  DateTime       @default(now())
  fromUser   User           @relation("SentProposals", fields: [fromUserId], references: [id])
  toUser     User           @relation("ReceivedProposals", fields: [toUserId], references: [id])
}

model ChatSession {
  id          String    @id @default(uuid())
  initiatorId String
  recipientId String
  createdAt   DateTime  @default(now())
  initiator   User      @relation("SentChats", fields: [initiatorId], references: [id])
  recipient   User      @relation("ReceivedChats", fields: [recipientId], references: [id])
  messages    Message[]
}

model Message {
  id          String      @id @default(uuid())
  chatId      String
  senderId    String
  recipientId String
  content     String      @db.VarChar(1000)
  createdAt   DateTime    @default(now())
  chat        ChatSession @relation(fields: [chatId], references: [id])
  recipient   User        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  message     String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  recipient   User     @relation("ReceivedNotifications", fields: [recipientId], references: [id], map: "notification_recipient_fkey")
  sender      User     @relation("SentNotifications", fields: [senderId], references: [id], map: "notification_sender_fkey")
}

model Review {
  id          String   @id @default(uuid())
  reviewerId  String
  revieweeId  String
  exchangeId  String
  rating      Int      // 1-5 stars
  comment     String?  @db.VarChar(1000)
  tags        String[]
  createdAt   DateTime @default(now())
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  exchange    SkillExchange @relation(fields: [exchangeId], references: [id])

  // Optionally, link to a BarterProposal or ChatSession if you want to tie reviews to a specific transaction
  // barterId   String?
  // barter     BarterProposal? @relation(fields: [barterId], references: [id])
}


model File {
  id           Int      @id @default(autoincrement())
  filename     String
  originalName String
  path         String
  mimetype     String
  size         Int
  uploaderId   String
  uploadedAt   DateTime @default(now())
  uploader     User     @relation(fields: [uploaderId], references: [id])
  chatId       String?  // Optional: link to chat message/session
}



model SkillExchange {
  id              String          @id @default(cuid())
  userAId         String
  userBId         String
  skillA          String
  skillB          String
  status          ExchangeStatus  @default(PENDING)
  userACompleted  Boolean         @default(false)
  userBCompleted  Boolean         @default(false)
  completedAt     DateTime?
  reviews         Review[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  userA           User            @relation("UserAExchanges", fields: [userAId], references: [id])
  userB           User            @relation("UserBExchanges", fields: [userBId], references: [id])
}



enum ExchangeStatus {
  PENDING
  COMPLETION_REQUESTED
  COMPLETED
  DISPUTED
}


enum ProposalStatus {
  pending
  accepted
  declined
}