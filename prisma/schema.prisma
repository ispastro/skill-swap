// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique @db.VarChar(20) // Unique for mentions, login, etc.
  email             String             @unique
  password          String
  bio               String?            @db.VarChar(255)        // Optional, max size good for UI display
  skillsHave        String[]           @default([])
  skillsWant        String[]           @default([])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  SentProposals     BarterProposal[]   @relation("SentProposals")
  ReceivedProposals BarterProposal[]   @relation("ReceivedProposals")
  SentChats         ChatSession[]      @relation("SentChats")
  ReceivedChats     ChatSession[]      @relation("ReceivedChats")
  SentMessages      Message[]          @relation("SentMessages")
  ReceivedMessages  Message[]          @relation("ReceivedMessages")
}

model BarterProposal {
  id           String         @id @default(uuid())
  fromUser     User           @relation("SentProposals", fields: [fromUserId], references: [id])
  fromUserId   String
  toUser       User           @relation("ReceivedProposals", fields: [toUserId], references: [id])
  toUserId     String
  offer        String         @db.VarChar(255) // Describe what the user offers
  request      String         @db.VarChar(255) // Describe what the user wants in return
  status       ProposalStatus @default(pending)
  createdAt    DateTime       @default(now())
}

model ChatSession {
  id          String      @id @default(uuid())
  initiatorId String
  recipientId String
  createdAt   DateTime    @default(now())
  initiator   User        @relation("SentChats", fields: [initiatorId], references: [id])
  recipient   User        @relation("ReceivedChats", fields: [recipientId], references: [id])
  messages    Message[]
}

model Message {
  id          String      @id @default(uuid())
  chatId      String
  senderId    String
  content     String      @db.VarChar(1000) // Allow longer messages
  createdAt   DateTime    @default(now())
  chat        ChatSession @relation(fields: [chatId], references: [id])
  sender      User        @relation("SentMessages", fields: [senderId], references: [id], map: "message_sender_fkey")
  recipient   User        @relation("ReceivedMessages", fields: [senderId], references: [id], map: "message_recipient_fkey")
}

enum ProposalStatus {
  pending
  accepted
  declined
}